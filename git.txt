************ Chapter 1. Getting Started ************

**** Git Basics ****

Conceptually, most other systems store information as a list of file-based changes. These systems think of the information they keep as a set of files and the changes made to each file over time.
Git thinks of its data more like a set of snapshots of a miniature filesystem. Every time you commit, or save the state of your project in Git, it basically takes a picture of what all
your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored.
NB: As far as I understand it, a file is a unit in CVS whereas a commit is a unit in Git.

You have the entire history of the project right there on your local disk => on latency network overhead
NB: As far as I understand, I cannot make a local commit in CVS.

Everything in Git is check-summed before it is stored and is then referred to by that checksum. The mechanism that Git uses for this checksumming is called a SHA-1 hash (40-character string composed of hexadecimal characters).

Git has three main states that your files can reside in: committed, modified, and staged. Committed means that the data is safely stored in your local database. Modified means that you
have changed the file but have not committed it to your database yet. Staged means that you have marked a modified file in its current version to go into your next commit snapshot. This leads us to the three main sections of a Git project: the Git directory, the working directory, and the staging area.
1. The Git directory is where Git stores the metadata and object database for your project. it is what is copied when you clone a repository from another computer.
2. The working directory is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.
3. The staging area (or the "index") is a file, generally contained in your Git directory, that stores information about what will go into your next commit.

************ Chapter 2. Git Basics ************

**** Getting a Git Repository ****

You clone a repository with git clone [url].
If you’re familiar with other VCS systems such as Subversion, you’ll notice that the command is “clone” and not “checkout”. This is an important distinction – instead of getting just a working copy, Git receives a full copy of nearly all data that the server has. Every version of every file for the history of the project is pulled down by default when you run git clone.

$ git clone https://github.com/libgit2/libgit2 mylibgit # clones to a directory with non-default name mylibgit (i.e. instead of libgit)

**** Recording Changes to the Repository ****

each file in your working directory can be in one of two states: tracked or untracked. Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged. Untracked files are everything else – any files in your working directory that were not in your last snapshot and are not in your staging area.

$ git status # determine which files are in which state
$ git add git.txt # begin tracking a new file => the file becomes tracked & staged

git add is a multipurpose command – you use it to begin tracking new files, to stage files etc.

$ git status --short # or -s
$ git add .gitignore
$ git diff # see what you’ve changed but not yet staged
$ git diff --staged # see what you have staged
$ git diff --cached # synonymous to --staged

NB: press Q to exit diff mode.

$ git commit -m "My first commit"
$git commit -v # puts the diff of your change in the editor
$ git config --global core.editor 'notepad++'
$ git add . # stages all modified files

NB: "use "git reset HEAD <file>..." to unstage

$ git checkout -- . # reset all unstaged changes
$ git log # shows history of commits







TODO: repeat what you have read so far