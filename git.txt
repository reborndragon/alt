************ Chapter 1. Getting Started ************

**** Git Basics ****

Conceptually, most other systems store information as a list of file-based changes. These systems think of the information they keep as a set of files and the changes made to each file over time.
Git thinks of its data more like a set of snapshots of a miniature filesystem. Every time you commit, or save the state of your project in Git, it basically takes a picture of what all
your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored.
NB: As far as I understand it, a file is a unit in CVS whereas a commit is a unit in Git.

You have the entire history of the project right there on your local disk => no latency network overhead
NB: As far as I understand, I cannot make a local commit in CVS.

Everything in Git is check-summed before it is stored and is then referred to by that checksum. The mechanism that Git uses for this checksumming is called a SHA-1 hash (40-character string composed of hexadecimal characters).

Git has three main states that your files can reside in: committed, modified, and staged. Committed means that the data is safely stored in your local database. Modified means that you
have changed the file but have not committed it to your database yet. Staged means that you have marked a modified file in its current version to go into your next commit snapshot. This leads us to the three main sections of a Git project: the Git directory, the working directory, and the staging area.
1. The Git directory is where Git stores the metadata and object database for your project. it is what is copied when you clone a repository from another computer.
2. The working directory is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.
3. The staging area (or the "index") is a file, generally contained in your Git directory, that stores information about what will go into your next commit.

************ Chapter 2. Git Basics ************

**** Getting a Git Repository ****

You clone a repository with git clone [url].
If you’re familiar with other VCS systems such as Subversion, you’ll notice that the command is “clone” and not “checkout”. This is an important distinction – instead of getting just a working copy, Git receives a full copy of nearly all data that the server has. Every version of every file for the history of the project is pulled down by default when you run git clone.

$ git clone https://github.com/libgit2/libgit2 mylibgit # clones to a directory with non-default name mylibgit (i.e. instead of libgit)

**** Recording Changes to the Repository ****

each file in your working directory can be in one of two states: tracked or untracked. Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged. Untracked files are everything else – any files in your working directory that were not in your last snapshot and are not in your staging area.

$ git status # determine which files are in which state
$ git add git.txt # begin tracking a new file => the file becomes tracked & staged

git add is a multipurpose command – you use it to begin tracking new files, to stage files etc.

$ git status --short # or -s
$ git add .gitignore
$ git diff # see what you’ve changed but not yet staged
$ git diff --staged # see what you have staged
$ git diff --cached # synonymous to --staged

NB: press Q to exit diff mode.

$ git commit -m "My first commit"
$ git commit -v # puts the diff of your change in the editor
$ git config --global core.editor 'notepad++'
$ git add . # stages all modified files

NB: "use "git reset HEAD <file>..." to unstage

$ git checkout -- . # reset all unstaged changes
$ git log # shows history of commits
# git rm toremove.txt # removes the file from staging area and from working dir

$ git commit -a -m 'msg' # skips staging area, i.e. stage every file that is already tracked before doing the commit, letting you skip the git add part
NB: this should not commit files that were not in last snapshot, i.e. untracked ones

Situation: I have created and accidentally staged notrack.txt -> I want to stop tracking it =>
$ git rm --cached notrack.txt

$ git mv git_cache.txt git_cache

**** Viewing the Commit History ****

$ git log -p -2 # -p means 'show diffs', -2 limits the output to only 2 entries
$ git log --stat
$ git log --pretty=oneline # other options: short, full, fuller (i.e. theyh follow --pretty=)
git log --pretty=format:'%h - %an, %ar : %s' # NB: no spaces!

The author is the person who originally wrote the work, whereas the committer is the person who last applied the work. So, if you send in a patch to a project and one of the core members applies the patch, both of you get credit – you as the author, and the core member as the committer.
NB: I do not understand it.

$ git log --graph
$ git log --since=18.hours
$ git log --since=2015-08-23
$ git log --since='0 years 1 day ago' # you may as well use --until, --before, --after
$ git log --author=illyuha
$ git log --grep='toremove' # search by key words
$ git log -STODO # i.e. -S option: shows the commits that introduced a change to the code that added or removed that string ('TODO' in my case)
$ git log git.txt

**** Undoing Things ****

you commit too early and possibly forget to add some files, or you mess up your commit message. If you want to try that commit again
$ git commit --amend

Unstaging: recall git reset HEAD <file>.
$ git checkout -- git.txt # unmodifying a modified file:
NB: this command unmodifies only not staged changes.

**** Working with Remotes ****

Remote repositories are versions of your project that are hosted on the Internet or network somewhere.

$ git remote # To see which remote servers you have configured

$ git remote add origin https://github.com/reborndragon/progit # [short name] [url] # adds a new remote repo

$ git remote -v # -v shows urls
origin  https://github.com/reborndragon/progit (fetch)
origin  https://github.com/reborndragon/progit (push)

$ git fetch origin # [remote name] # goes out to that remote project and pulls down all the data from that remote project that you don’t have yet. After you do this, you should have references to all the branches from that remote
NB: git fetch doesn’t automatically merge it with any of your work or modify what you’re currently working on

$ git pull origin master # fetch and then merge a remote branch into your current branch

$ git push origin master # [remote name] [branch name]
NB: works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime

$ git remote show origin # shows information about a particular remote
# shows which remote branches on the server you don’t yet have, which remote branches you have that have been removed from the server, and multiple branches that are automatically merged when you run git pull

$ git remote rename origin core

$ git remote rm illya

**** Tagging ****

Git has the ability to tag specific points in history as being important. Typically people use this functionality to mark release points.

$ git tag # Listing the available tags

TODO:
$ git tag -l 'v1.8.5*'

Git uses two main types of tags: lightweight and annotated.
A lightweight tag is very much like a branch that doesn’t change – it’s just a pointer to a specific commit.
Annotated tags, however, are stored as full objects in the Git database. They’re checksummed; contain the tagger name, e-mail, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG).

$ git tag -a v1.1 -m 'Version 1.1' # adds an annotated commit
$ git show v1.1

lightweight tag is basically the commit checksum stored in a file – no other information is kept.

$ git tag c2.6.1 # adds a lightweight tag
$ git show c2.6.1 # shows less info than git show v1.1

tag commits after you’ve moved past them:
$ git tag -a v1.0.0 cefb900 -m 'random tag & random commit'

TODO:
$ git push origin v1.2.3 # v1.2.3 is tag name; this allows to push the tag name to remote servers
TODO: Sharing & checking out tags

**** Git aliases ****

$ git config --global alias.co checkout
$ git config --global alias.unstage 'reset HEAD --' # '--' seems to be a param

$ git log -1 HEAD # logs the last commit

$ git unstage git.txt

TODO: external (i.e. non-git) commands can also be aliased


************ Chapter 3. Git Branching ************

**** Branches in a Nutshell ****

When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged. This object also contains the author’s name and email, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.

TODO: read about BLOB

next commit stores a pointer to the commit that came immediately before it.
A branch in Git is simply a lightweight movable pointer to one of these commits

What happens if you create a new branch? Well, doing so creates a new pointer for you to move around. 

$ git branch test #  creates a new pointer at the same commit you’re currently on
How does Git know what branch you’re currently on? It keeps a special pointer called HEAD. In Git, this is a pointer to the local branch you’re currently on. In this case, you’re still on master. The git branch command only created a new branch – it didn’t switch to that branch.

$ git log --oneline --decorate # shows where the branch pointers are pointing
E.g.: 'fa0dd5a (HEAD, core/master, test, master) Aliases'
FAQ: master & core/master?

$ git checkout test # switch to an existing branch, i.e. move HEAD to point to the 'test' branch
$ git commit -a -m 'Part of Branches in a Nutshell'
$ git checkout master # Local modifications to the files in the working tree are kept, so that they can be committed to 'master'.
NB: That command did two things. It moved the HEAD pointer back to point to the master branch, and it reverted the files in your working directory back to the snapshot that master points to. 

$ git config --global core.editor "'notepad++' -multiInst -notabbar -nosession -noPlugin" # enables me to write commit messages in notepad++

FAQ: 'git log --oneline --decorate --graph --all' does not work as it is in the book

Because a branch in Git is in actuality a simple file that contains the 40 character SHA-1 checksum of the commit it points to, branches are cheap to create and destroy.
This is in sharp contrast to the way most older VCS tools branch, which involves copying all of the project’s files into a second directory.
NB: there is a file called 'test' which resides in 'D:\CQG\Learning Git\.git\refs\heads'

**** Basic Branching and Merging ****

$ git checkout -b dsi0 # create a branch and switch to it at the same time

$ git checkout -b mergetest
$ git commit -m 'smth'
$ git push core mergetest
$ git checkout master
$ git merge mergetest







TODO: repeat what you have read so far
TODO: send this file to your working PC